buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
    }

    dependencies {
        classpath 'org.yaml:snakeyaml:1.28'
        classpath 'org.apache.commons:commons-lang3:3.12.0'

    }
}

import org.apache.commons.lang3.SystemUtils
import org.yaml.snakeyaml.Yaml

import java.nio.file.Files

ext {
    workDir = new File(projectDir, 'work')

    dockerPrefix = 'docker.io/kettil'
    dockerImage = null

    invokerDockerImage = 'docker.io/kettil/faas-invoker'
    dockerFile = new File(workDir, "Dockerfile")

    manifest = null
    artifact = null
}

def clean = tasks.register("clean") {
    doLast {
        if (workDir.exists())
            exec {
                commandLine 'rm', '-rf', workDir
            }
    }
}

def downloadRepo = tasks.register("downloadRepo") {
    dependsOn clean

    doLast {
        Files.createDirectories(workDir.toPath())

        exec {
            workingDir workDir
            commandLine 'git', 'clone', System.getProperty("repo"), './'
        }
    }
}

def readManifest = tasks.register("readManifest") {
    dependsOn downloadRepo

    doLast {
        manifest = new Yaml().load(
                Files.newInputStream(new File(workDir, "manifest.yaml").toPath()))

        dockerImage = "${dockerPrefix}/${manifest.name}"
    }
}

def buildRepo = tasks.register("buildRepo") {
    dependsOn readManifest

    doLast {
        if (SystemUtils.IS_OS_LINUX || SystemUtils.IS_OS_MAC) {
            if (new File(workDir, 'gradlew').exists())
                exec {
                    workingDir workDir
                    commandLine "./gradlew", "clean", "shadowJar"
                }
            else if (new File(workDir, 'mvnw').exists())
                exec {
                    workingDir workDir
                    commandLine './mvnw', 'clean', 'package'
                }
            else
                throw new Exception("Neither gradlew nor mvnw are available in repo")
        } else if (SystemUtils.IS_OS_WINDOWS) {
            if (new File(workDir, 'gradlew.bat').exists())
                exec {
                    workingDir workDir
                    commandLine 'gradlew.bat', 'clean', 'shadowJar'
                }
            else if (new File(workDir, 'mvnw.bat').exists())
                exec {
                    workingDir workDir
                    commandLine 'mvnw.bat', 'clean', 'package'
                }
            else
                throw new GradleException("Neither gradlew nor mvnw are available in repo")
        } else {
            throw new GradleException("Unknown OS")
        }

        artifact = new File(workDir, manifest.location)
        if (!artifact.exists())
            throw new GradleException("Artifact '" + artifact.toString() + "' is missing after build")
    }
}

def writeDockerfile = tasks.register("writeDockerfile") {
    dependsOn buildRepo

    doLast {
        dockerFile.newPrintWriter().withCloseable {
            it.printf("FROM %s%n", invokerDockerImage)
            it.printf("COPY %s /%n", manifest.location)
//            it.printf("COPY %s /%n", "manifest.yaml")
        }
    }
}

def copyTemplates = tasks.register("copyTemplates") {
    dependsOn readManifest

    doLast {
        copy {
            from new File(workDir, "../template")
            into workDir
        }

        copy {
            from new File(workDir, "manifest.yaml")
            into new File(workDir, "kube/kustomize")
        }
    }
}

def adjustTemplates = tasks.register("adjustTemplates") {
    dependsOn copyTemplates

    doLast {
        exec {
            workingDir new File(workDir, "kube/kustomize")
            commandLine 'kustomize', "edit", "set", "image", "materialized-invoker=${dockerImage}"
        }

//        exec {
//            workingDir new File(workDir, "kube/kustomize")
//            commandLine 'kustomize', "edit", "set", "namespace", "faas"
//        }

//        exec {
//            workingDir new File(workDir, "kube/kustomize")
//            commandLine 'kustomize', "edit", "set", "nameprefix", "${manifest.name}-"
//        }

        exec {
            workingDir workDir
            commandLine 'sed', '-i', "s%materialized-invoker%${dockerImage}%", "skaffold.yaml"
        }
    }
}

def buildDockerImage= tasks.register("buildDockerImage", Exec) {
    dependsOn writeDockerfile
    workingDir workDir
    commandLine 'docker', 'build', '-t', dockerImage, '.'
}

def pushDockerImage = tasks.register("pushDockerImage", Exec) {
    dependsOn buildDockerImage
    commandLine 'docker', 'push', dockerImage

    doLast {
        println "Pushed Docker image ${dockerImage}"
    }
}

def run = tasks.register("run") {
    dependsOn adjustTemplates, writeDockerfile

    doLast {
        exec {
            workingDir workDir
            commandLine 'skaffold', 'run'
        }
    }
}

def delete = tasks.register("delete") {
    doLast {
        exec {
            workingDir workDir
            commandLine 'skaffold', 'delete'
        }

        exec {
            workingDir projectDir
            commandLine 'rm', '-rf', 'work'
        }
    }
}
